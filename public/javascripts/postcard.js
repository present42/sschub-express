
var count = 0;
var messages = {};
let pid;

var webSocket = new WebSocket('ws://143.89.6.61/websockets');
var board_details;
var color_list;

var volume = undefined;
var bg_music = undefined;
var background_img = undefined;
var background_video = undefined;
var text_color = undefined;

webSocket.onopen = function (event) {
  pid = setInterval(() => { webSocket.send(JSON.stringify({ msg: "give me new message" })); }, 1000);
};

webSocket.onmessage = function (event) {
  data = JSON.parse(event.data);
  console.log(data);
  board_details = data[1][0];
  color_list = board_details.post_colors.split('  ');

  
  var board_title = document.getElementById("board_title");
  board_title.innerHTML = board_details.title;
  board_title.style.color = board_details.title_color;
  data = data[0];
  l = ['bg', 'md','sm'];
  
  if(data.message.length > 100) s = l[getRandomInt(0, 1)];
  else s = l[getRandomInt(0, 2)];

  createNewMessage(0, 0, s, data.message, data.nickname, data.email, board_details.text_color, data.image_path, data.approved_time, data.color_index);
  textFit(document.getElementsByClassName('msg'));
  
  if(background_img == undefined && background_video == undefined) {
    background_img = board_details.background_img;
    background_video = board_details.background_video;
  }

  if(background_img != board_details.background_img) {
    background_img = board_details.background_img;
    document.querySelector('body').style.backgroundImage = `url(/images/${background_img})`;
  }

  if(background_video != board_details.background_video) {
    background_video = board_details.background_video;
    document.querySelector('video source').src = `/videos/${background_video}`;
    document.querySelector('video').load();
  }

  if(bg_music === undefined) {
    bg_music = board_details.bg_music;
    volume = Number(board_details.bg_music_volume);
    document.querySelector('#bg_music').volume = volume / 100;
  } else if(bg_music != board_details.bg_music) {
    bg_music = board_details.bg_music;
    document.querySelector('source').src = "/music/" + bg_music;
    document.querySelector('source').type = board_details.bg_music_extension;
    document.querySelector('#bg_music').load();
  }

  if(Number(board_details.bg_music_volume) != volume) {
    volume = Number(board_details.bg_music_volume);
    document.querySelector('#bg_music').volume = volume / 100;
  }

  if(document.querySelector('#bg_music').paused) {
    document.querySelector('#bg_music').play();
  } 
}

webSocket.onclose = function (event) {
  clearInterval(pid);
}

/**
 * Returns a random integer between min (inclusive) and max (inclusive).
 * The value is no lower than min (or the next integer greater than min
 * if min isn't an integer) and no greater than max (or the next integer
 * lower than max if max isn't an integer).
 * Using Math.round() will give you a non-uniform distribution!
 */
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
// distribute evenly across viewport (avoid too much overlapping)
function getRandomPos(cur, min, max){
  if (cur%2 == 0){
    max =max/2+20;
  } else {
    min = max/2-20;
  }
  return getRandomInt(min,max);
}

function createNewMessage(pos_x = 0, pos_y = 0, size = 'md', message = ". This content is a little bit longer.", nickname = "hyunju", email = "hyunju@connect.abc.com", text_color="black", filename, time, index) {
  // color_list = ["rgba(255, 255, 255, 0.856)", "rgba(238, 228, 218, 0.87)", "rgba(237, 194, 46, 0.87)"];
  // color = getRandomInt(0, 2);
  color = color_list[index];


  const monthNames = ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
    "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
  ];
  var date = undefined;
  if (time) date = new Date(time);
  var height = 16,
    width = 16,
    top = 2;
  var cur = count++;
  
  // control for speed of message generation
  // 9 implies "a single message is generated by every 9 seconds"
  if(count >= 207){
    count = 0;
  }
  if(cur % 7 != 0) {
    return;
  }
  

  if (size == 'bg') {
    height = 25;
    width = 25 * 2.25;
    // top: 2 - 73
    top = getRandomPos(cur, 2, 70);
  } else if (size == 'md') {
    height = 20;
    width = 45;
    // top: 2 - 79
    top = getRandomPos(cur, 2, 75);
  } else {
    size = "sm";
    // top: 2 - 82
    top = getRandomPos(cur, 2, 80);
  }
  let duration = [110,130,160];
  var str = `<div id="${cur}" class="position-absolute card ${size}" style="background: ${color};top: ${top}%; left: -30%; animation-duration: ${duration[getRandomInt(0,2)]}s;">
        <div class="msg-body">
          <div class="msg-half">
            <img src="/images/posts/${filename}" class="msg-img rounded" alt="..." />
          </div>
          <div class="msg-half msg-text" style="color: ${text_color}"><div class="msg" style="vertical-align: middle;">
              ${message}
              </div>
          </div>
        </div>
        <div style="height:4.5%;border-bottom: 0.5px rgba(76, 76, 76, 0.492) solid; box-shadow: 0 1.2px 1px -1px rgba(104, 104, 104, 0.444);"></div>
        <div style="height:2.5%"></div>
        <div class="msg-footer">
          <div style="float: left; height: 100%"> 
          <i class="material-icons">account_circle</i><span style="vertical-align:middle;">   ${nickname ? `${nickname}` : "Anon"}</span>
          </div>
          <div style="float: right; height: 100%">
          ${date ? `<i class="material-icons"> access_time</i><span style="vertical-align:middle">   ${monthNames[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear()}</span>` : ""}
          </div>
        </div>
      </div>`;

  var str_without_img = `<div id="${cur}" class="card position-absolute ${size}" style="background: ${color};top: ${top}%; left: -30%;animation-duration: ${duration[getRandomInt(0,2)]}s;">
    <div class="msg-body">
      <div class="msg-text" style="padding: 0 0 0 0; color: ${text_color}">
        <div class="msg" style="vertical-align: middle;">
          ${message}
        </div>
      </div>
    </div>
    <div style="height:4.5%;border-bottom: 0.5px rgba(76, 76, 76, 0.492) solid; box-shadow: 0 1.2px 1px -1px rgba(104, 104, 104, 0.444);"></div>
    <div style="height:2.5%"></div>
    <div class="msg-footer">
      <div style="float: left; height: 100%;"> 
      <i class="material-icons">account_circle</i><span style="vertical-align:middle;">   ${nickname ? `${nickname}` : "Anon"}</span>
      </div>
      <div style="float: right; height: 100%">
      ${date ? `<i class="material-icons"> access_time</i><span style="vertical-align:middle">${monthNames[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear()}</span>` : ""}
    </div>
  </div>`;

  var str_without_text = `<div id="${cur}" class="card position-absolute ${size}" style="background: ${color};top: ${top}%; left: -30%;animation-duration: ${duration[getRandomInt(0,2)]}s;">
  <div class="msg-body">
    <div class="msg-image">
      <img src="/images/posts/${filename}" class="msg-img" alt="..." />
    </div>
  </div>
  <div style="height:4.5%;border-bottom: 0.5px rgba(76, 76, 76, 0.492) solid; box-shadow: 0 1.2px 1px -1px rgba(104, 104, 104, 0.444);"></div>
    <div style="height:2.5%"></div>
    <div class="msg-footer">
      <div style="float: left; height: 100%"> 
      <i class="material-icons">account_circle</i><span style="vertical-align:middle;">   ${nickname ? `${nickname}` : "Anon"}</span>
      </div>
      <div style="float: right; height: 100%">
      ${date ? `<i class="material-icons"> access_time</i><span style="vertical-align:middle">${monthNames[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear()}</span>` : ""}
    </div>
</div>`;
  var parser = new DOMParser();
  var container = document.getElementById("container");
  if (filename) {
    if (message) {
      var temp = parser.parseFromString(str, "text/html");
    } else {
      var temp = parser.parseFromString(str_without_text, "text/html");
    }

  } else {
    var temp = parser.parseFromString(str_without_img, "text/html");
  }
  messages[cur] = temp.body.firstChild;
  temp.body.firstChild.addEventListener('animationiteration', () => {
    console.log(`animation (id:${cur}) iteration finished`);
    deleteMessage(cur);
  })
  return [container.appendChild(temp.body.firstChild), cur];
}

function deleteMessage(id) {
  if (id in messages) {
    messages[id].remove();
  }
}
